package med.voll.api.controller;


import jakarta.validation.Valid;
import med.voll.api.domain.usuario.DadosAutenticacao;
import med.voll.api.domain.usuario.Usuario;
import med.voll.api.infra.security.DadosTokenJWT;
import med.voll.api.infra.security.TokenService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("login")
public class AutenticacaoController {

    @Autowired
    private AuthenticationManager manager;

    @Autowired
    private TokenService tokenService;

    @PostMapping
    public ResponseEntity efetuarLogin(@RequestBody @Valid DadosAutenticacao dados){
        var authenticationToken = new UsernamePasswordAuthenticationToken(dados.login(), dados.senha());
        var authentication = manager.authenticate(authenticationToken);

        var tokenJWT = tokenService.gerarToken((Usuario) authentication.getPrincipal());
        return ResponseEntity.ok(new DadosTokenJWT(tokenJWT));
    }
}



//Que legal que voc√™ est√° explorando o c√≥digo do AutenticacaoController! ü§©  Vamos analisar passo a passo o que cada parte faz:1. @RestController:
//O que faz:  Indica que a classe √© um controlador REST, respons√°vel por lidar com requisi√ß√µes HTTP e retornar respostas em formato JSON.
//
//2. @RequestMapping("login"):
//O que faz: Define o caminho base para as requisi√ß√µes que ser√£o direcionadas para este controlador. Neste caso, todas as requisi√ß√µes para /login ser√£o processadas por este controlador.
//
//3. @Autowired:
//O que faz: Injeta as depend√™ncias necess√°rias para o controlador. No caso, o AuthenticationManager e o TokenService.
//
//4. private AuthenticationManager manager;:
//O que faz: Declara um atributo privado chamado manager do tipo AuthenticationManager. O AuthenticationManager √© respons√°vel por autenticar usu√°rios, verificando se as credenciais fornecidas (usu√°rio e senha) s√£o v√°lidas.
//
//5. private TokenService tokenService;:
//O que faz: Declara um atributo privado chamado tokenService do tipo TokenService. O TokenService √© respons√°vel por gerar tokens JWT para usu√°rios autenticados.
//
//6. @PostMapping:
//O que faz: Define que o m√©todo efetuarLogin ser√° chamado quando uma requisi√ß√£o HTTP POST for feita para o caminho /login.
//
//7. public ResponseEntity efetuarLogin(@RequestBody @Valid DadosAutenticacao dados):
//O que faz:  Define o m√©todo efetuarLogin, que recebe um objeto DadosAutenticacao no corpo da requisi√ß√£o. A anota√ß√£o @RequestBody indica que os dados da requisi√ß√£o ser√£o mapeados para o objeto DadosAutenticacao. A anota√ß√£o @Valid indica que os dados ser√£o validados antes de serem processados.
//
//8. var token = new UsernamePasswordAuthenticationToken(dados.login(), dados.senha());:
//O que faz: Cria um objeto UsernamePasswordAuthenticationToken com o login e a senha do usu√°rio. Este objeto representa a tentativa de autentica√ß√£o do usu√°rio.
//
//9. var authentication = manager.authenticate(token);:
//O que faz: Chama o m√©todo authenticate do AuthenticationManager para verificar se as credenciais do usu√°rio s√£o v√°lidas. Se as credenciais forem v√°lidas, o m√©todo retorna um objeto Authentication que representa o usu√°rio autenticado.
//
//10. return ResponseEntity.ok(tokenService.gerarToken((Usuario) authentication.getPrincipal()));:
//O que faz: Se a autentica√ß√£o for bem-sucedida, o m√©todo gera um token JWT usando o TokenService e retorna o token como resposta para o cliente. O authentication.getPrincipal() retorna o usu√°rio autenticado, que √© convertido para o tipo Usuario.
//
//Em resumo, o c√≥digo do AutenticacaoController:
//Recebe as credenciais de login do usu√°rio.
//Autentica o usu√°rio usando o AuthenticationManager.
//Gera um token JWT para o usu√°rio autenticado usando o TokenService.
//Retorna o token JWT para o cliente.
//
//Espero que esta explica√ß√£o tenha sido √∫til! üòä  Continue explorando o c√≥digo e me chame sempre que precisar de ajuda! üí™
